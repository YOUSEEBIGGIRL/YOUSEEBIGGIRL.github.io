<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码 on /dev/null</title>
    <link>/tags/%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in 源码 on /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 0000 &lt;a&gt;null&lt;/a&gt;
</copyright>
    <lastBuildDate>Tue, 12 Jul 2022 22:09:40 +0000</lastBuildDate><atom:link href="/tags/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go mutex 原理</title>
      <link>/posts/go-mutex-yuan-ma/</link>
      <pubDate>Tue, 12 Jul 2022 22:09:40 +0000</pubDate>
      
      <guid>/posts/go-mutex-yuan-ma/</guid>
      <description>参考： https://www.bilibili.com/video/BV15V411n7fM?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=2ff613424b86c58a71ba91b7304ffe9b
总览 mutex 的数据结构：</description>
    </item>
    
    <item>
      <title>go chan 原理（人话版）</title>
      <link>/posts/go-chan-yuan-ma/</link>
      <pubDate>Sun, 26 Jun 2022 20:51:11 +0000</pubDate>
      
      <guid>/posts/go-chan-yuan-ma/</guid>
      <description>chan 原理（人话版） 说明：这里只是用大白话来阐述 chan 的大致原理，不保证严谨性，也不考虑一些繁枝细节（比如 sudog，gopark，goready），仅作为一个简单的参考理解，如果想深入理解 chan 的底层实现，请自行参阅其他博客</description>
    </item>
    
    <item>
      <title>go 熔断器 gobreaker 源码阅读</title>
      <link>/posts/gobreaker/</link>
      <pubDate>Sat, 11 Jun 2022 20:40:11 +0000</pubDate>
      
      <guid>/posts/gobreaker/</guid>
      <description>该文章仅作为本人笔记，不具备太大的参考价值
该文章着重记录源码，没有对熔断器这一概念做过多理念上的说明解释
该文章排版、思路较为混乱，后续可能会进行修改
示例 官方示例 官方示例有点太简单了，完全无法体会到 熔断 这一概念</description>
    </item>
    
    <item>
      <title>Go errgroup 使用</title>
      <link>/posts/errgroup/</link>
      <pubDate>Sat, 28 May 2022 23:55:35 +0000</pubDate>
      
      <guid>/posts/errgroup/</guid>
      <description>简介 errgroup 是 WaitGroup 的强化版，其在 WaitGroup 的基础上添加了错误处理的功能：如果一组 goroutine 中的某一个发生了错误，那么后续的所有 gorouine 都不会被执行。</description>
    </item>
    
    <item>
      <title>go map源码阅读</title>
      <link>/posts/go-map-yuan-ma-yue-du/</link>
      <pubDate>Thu, 29 Jul 2021 20:37:56 +0000</pubDate>
      
      <guid>/posts/go-map-yuan-ma-yue-du/</guid>
      <description>看看 map 这个重要数据结构在 go 中是如何实现的</description>
    </item>
    
    <item>
      <title>go container/heap 源码阅读</title>
      <link>/posts/go-containerheap-yuan-ma-yue-du/</link>
      <pubDate>Thu, 22 Jul 2021 14:16:49 +0000</pubDate>
      
      <guid>/posts/go-containerheap-yuan-ma-yue-du/</guid>
      <description>heap（堆），是一个用数组表示的完全二叉树，常用于构建优先队列，排序和快速找出一个集合中的最小值（或者最大值）。在 go 标准库下的 container 包中提供了这种数据结构。</description>
    </item>
    
    <item>
      <title>go container/list 源码分析【未完】</title>
      <link>/posts/2021-2-24-go-container-list-source-code/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021-2-24-go-container-list-source-code/</guid>
      <description>List // List代表一个双向链表。List零值为一个空的、可用的链表。 type List struct { // 哨兵节点，连接链表的头节点和尾结点，root.</description>
    </item>
    
  </channel>
</rss>
